type TransferError = 
 variant {
   BadBurn: record {min_burn_amount: nat;};
   BadFee: record {expected_fee: nat;};
   CreatedInFuture: record {ledger_time: nat64;};
   Duplicate: record {duplicate_of: nat;};
   GenericError: record {
                   error_code: nat;
                   message: text;
                 };
   InsufficientFunds: record {balance: nat;};
   TemporarilyUnavailable;
   TooOld;
 };
type TransferArgs = 
 record {
   amount: nat;
   created_at_time: opt nat64;
   fee: opt nat;
   from_subaccount: opt Subaccount;
   memo: opt blob;
   to: AccountRefOpt;
 };
type Subaccount = blob;
type ICRC1Ledger = 
 service {
   icrc1_balance_of: (AccountRefOpt) -> (nat);
   icrc1_decimals: () -> (nat8) query;
   icrc1_fee: () -> (nat) query;
   icrc1_metadata: () ->
    (vec record {
           text;
           variant {
             Blob: blob;
             Int: int;
             Nat: nat;
             Text: text;
           };
         }) query;
   icrc1_symbol: () -> (text) query;
   icrc1_transfer: (TransferArgs) -> (variant {
                                        Err: TransferError;
                                        Ok: nat;
                                      });
   issueTokens: (AccountRefOpt, nat) -> ();
   updateFee: (nat) -> ();
 };
type AccountRefOpt = 
 record {
   owner: principal;
   subaccount: opt Subaccount;
 };
service : () -> ICRC1Ledger
